name: 'Telegram notification with message editing'
description: 'Telegram notification for workflow with one message editing'
author: 'asvataa'
branding:
  icon: 'send'
  color: 'blue'
inputs:
  status:
    description: "The current status of the job: job.status, defaults to 'success'"
    required: true
  environment:
    description: 'The Current deploy environment'
    required: true
  app-name:
    description: "The current status of the job: job.status, defaults to 'success'"
    required: true
#  run-id:
#    description: "Workflow run id"
#    required: true
  tg-token:
    description: "Telegram token"
    required: true
  message-id:
    description: "Telegram message id, for first run can be empty"
    required: false
  chat-id:
    description: "The telegram chat id"
    required: true
outputs:
  message-id:
    description: "Message id of first message"
    value: ${{ steps.tg-send.outputs.message_id }}
runs:
  using: composite
  steps:
    - name: Send message to telegram
      id: tg-send
      shell: bash
      env:
        STATUS: ${{ inputs.status }}
        ENV: ${{ inputs.environment }}
        APP_NAME: ${{ inputs.app-name }}
        CHAT_ID: ${{ inputs.chat-id }}
        RUN_ID: ${{ github.run_id }}
        REPO_NAME: ${{ github.repository }}
        TG_TOKEN: ${{ inputs.tg-token }}
        MESSAGE_ID: ${{ inputs.message-id }}

      run: |
        escape_chars () {
          local result=$(echo $1 | sed -E 's_(\\|\*|\`|\_|\{|\}|\[|\]|\(|\)|\#|\+|\-|\.|\!)_\\\\\1_g')
          echo $result
        }
  
        JSON_BASE_D_pre='{"chat_id":"CHAT_ID","disable_web_page_preview":"true","parse_mode":"MarkdownV2","text":"%s","silent":"%s"}'
        JSON_BASE_DF_pre='{"chat_id":"CHAT_ID","disable_web_page_preview":"true","parse_mode":"MarkdownV2","text":"%s","message_id":"%s","silent":"%s"}'
        
        JSON_BASE_D=${JSON_BASE_D_pre/CHAT_ID/$CHAT_ID}
        JSON_BASE_DF=${JSON_BASE_DF_pre/CHAT_ID/$CHAT_ID}
        text=""
        message_id=""
        escaped_app_name="$(escape_chars "$APP_NAME")"
        actions_run_url="[$escaped_app_name](https://github.com/$REPO_NAME/actions/runs/$RUN_ID)"
  
        case "$STATUS" in
  
        deploying)
          text="🤞Deploying\\\.\\\.\\\.\n$actions_run_url\n*$ENV*"
          silent_enabled="true"
          JSON_STRING=$(printf "$JSON_BASE_D" "$text" "$silent_enabled")
          echo "message_id=$(curl --connect-timeout 1 --silent -X POST -H 'Content-Type: application/json' -d "$JSON_STRING" https://api.telegram.org/bot$TG_TOKEN/sendMessage | jq .result.message_id)" >> $GITHUB_OUTPUT
        ;;
  
        success)
          text="✅Deployed\n$actions_run_url\n*$ENV*"
          silent_enabled="true"
          JSON_STRING=$(printf "$JSON_BASE_DF" "$text" "$MESSAGE_ID" "$silent_enabled")
          curl --connect-timeout 1 --silent -X POST -H 'Content-Type: application/json' -d "$JSON_STRING" https://api.telegram.org/bot$TG_TOKEN/editMessageText > /dev/null
        ;;
  
        failure)
          text="❌Failed\n$actions_run_url\n*$ENV*"
          silent_enabled="false"
          JSON_STRING=$(printf "$JSON_BASE_DF" "$text" "$MESSAGE_ID" "$silent_enabled")
          curl --connect-timeout 1 --silent -X POST -H 'Content-Type: application/json' -d "$JSON_STRING" https://api.telegram.org/bot$TG_TOKEN/editMessageText > /dev/null
        ;;
  
        cancelled)
          text="❌Cancelled\n$actions_run_url\n*$ENV*"
          silent_enabled="false"
          JSON_STRING=$(printf "$JSON_BASE_DF" "$text" "$MESSAGE_ID" "$silent_enabled")
          curl --connect-timeout 1 --silent -X POST -H 'Content-Type: application/json' -d "$JSON_STRING" https://api.telegram.org/bot$TG_TOKEN/editMessageText > /dev/null
        ;;
  
        *)
          echo "not found"
          exit 0
        ;;
        esac